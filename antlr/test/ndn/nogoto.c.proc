#include "fpp.h"
void process_batch_nogoto(struct rte_mbuf **pkts, int nb_pkts,
                          struct ndn_bucket *ht,
                          struct lcore_port_info *lp_info, int port_id)
{
	struct ether_hdr *eth_hdr[BATCH_SIZE];
	char *name[BATCH_SIZE];
	char *data_ptr[BATCH_SIZE];
	int fwd_port[BATCH_SIZE];
	int i[BATCH_SIZE];
	int c_i[BATCH_SIZE];
	int bkt_2[BATCH_SIZE];
	int bkt_1[BATCH_SIZE];
	int bkt_num[BATCH_SIZE];
	int terminate[BATCH_SIZE];
	int prefix_match_found[BATCH_SIZE];
	uint64_t prefix_hash[BATCH_SIZE];
	uint16_t tag[BATCH_SIZE];
	struct ndn_slot *slots[BATCH_SIZE];
	int8_t _dst_port[BATCH_SIZE];
	uint64_t _hash[BATCH_SIZE];

	int I = 0;			// batch index
	void *batch_rips[BATCH_SIZE];		// goto targets
	int iMask = 0;		// No packet is done yet

	int temp_index;
	for(temp_index = 0; temp_index < BATCH_SIZE; temp_index ++) {
		batch_rips[temp_index] = &&fpp_start;
	}

fpp_start:

        fwd_port[I] = -1;
        
        if(I != nb_pkts - 1) {
            rte_prefetch0(pkts[I + 1]->pkt.data);
        }
        
        eth_hdr[I] = (struct ether_hdr *) pkts[I]->pkt.data;
        data_ptr[I] = (char *) pkts[I]->pkt.data;
        name[I] = data_ptr[I] + HDR_SIZE + sizeof(int) + sizeof(LL);
        
         /**< URL char iterator and slot iterator */
        
        terminate[I] = 0;          /**< Stop processing this URL? */
        prefix_match_found[I] = 0; /**< Stop this hash-table lookup ? */
        
        /**< Completely ignore 1-component matches */
        for(c_i[I] = 0; name[I][c_i[I]] != 0; c_i[I] ++) {
            if(name[I][c_i[I]] == '/') {
                break;
            }
        }
        c_i[I] ++;
        
        for(; name[I][c_i[I]] != 0; c_i[I] ++) {
            if(name[I][c_i[I]] != '/') {
                continue;
            }
            
            /**< c_i is now at the boundary of a component longer than the 1st */
            prefix_hash[I] = CityHash64WithSeed(name[I], c_i[I] + 1, NDN_SEED);
            tag[I] = prefix_hash[I] >> 48;
            
            /**< name[0] -> name[c_i] is a prefix of length c_i + 1 */
            for(bkt_num[I] = 1; bkt_num[I] <= 2; bkt_num[I] ++) {
                if(bkt_num[I] == 1) {
                    bkt_1[I] = prefix_hash[I] & NDN_NUM_BKT_;
                    FPP_PSS(&ht[bkt_1[I]], fpp_label_1);
fpp_label_1:

                    slots[I] = ht[bkt_1[I]].slots;
                } else {
                    bkt_2[I] = (bkt_1[I] ^ CityHash64((char *) &tag[I], 2)) & NDN_NUM_BKT_;
                    FPP_PSS(&ht[bkt_2[I]], fpp_label_2);
fpp_label_2:

                    slots[I] = ht[bkt_2[I]].slots;
                }
                
                /**< Now, "slots" points to an ndn_bucket. Find a valid slot
                 *  with a matching tag. */
                for(i[I] = 0; i[I] < NDN_NUM_SLOTS; i[I] ++) {
                    _dst_port[I] = slots[I][i[I]].dst_port;
                    _hash[I] = slots[I][i[I]].cityhash;
                    
                    if(_dst_port[I] >= 0 && _hash[I] == prefix_hash[I]) {
                        
                        /**< Record the dst port: this may get overwritten by
                         *  longer prefix matches later */
                        fwd_port[I] = slots[I][i[I]].dst_port;
                        
                        if(slots[I][i[I]].is_terminal == 1) {
                            /**< A terminal FIB entry: we're done! */
                            terminate[I] = 1;
                        }
                        
                        prefix_match_found[I] = 1;
                        break;
                    }
                }
                
                /**< Stop the hash-table lookup for name[0 ... c_i] */
                if(prefix_match_found[I] == 1) {
                    break;
                }
            }
            
            /**< Stop processing the name if we found a terminal FIB entry */
            if(terminate[I] == 1) {
                break;
            }
        }   /**< Loop over URL characters ends here */
        
        /**< Count failed packets and transmit */
        if(fwd_port[I] == -1) {
            lp_info[port_id].nb_tx_fail ++;
            rte_pktmbuf_free(pkts[I]);
        } else {
            set_mac(eth_hdr[I]->d_addr.addr_bytes, dst_mac_arr[fwd_port[I]]);
            
            /**< Reduce RX load on client: If the client sent a bad
             *  src MAC address, garble dst MAC address */
            if(eth_hdr[I]->s_addr.addr_bytes[0] == 0xef) {
                eth_hdr[I]->d_addr.addr_bytes[0] ++;
            }
            set_mac(eth_hdr[I]->s_addr.addr_bytes, src_mac_arr[port_id]);
            send_packet(pkts[I], fwd_port[I], lp_info);
        }  
      
fpp_end:
	batch_rips[I] = &&fpp_end;
	iMask = FPP_SET(iMask, I); 
	if(iMask == (1 << nb_pkts) - 1) {
		return;
	}
	I = (I + 1) < nb_pkts ? I + 1 : 0;
	goto *batch_rips[I];

}

