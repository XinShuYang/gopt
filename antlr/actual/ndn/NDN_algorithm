Assumption
===========

Incoming packets can only match terminal prefixes. For example, if we
have *only* two inserted URLs:

	com/google/maps/ --> Port #1
	com/google/drive/ --> Port #2

and a incoming packet has destination URL "com/google/", our outbound port
is the outbound port of the *first* inserted URL that had this prefix. Ideally,
we should do some sort of load-balancing between candidate ports.


Semantics of "terminal" prefixes:
=================================

A terminal prefix means that an LPM should stop here.



Inserting a URL into the NDN hash table:
========================================

The URL is inserted by breaking it down into prefixes at component boundaries.
For example, the URL com/google/maps leads to the insertion of three prefixes:

	com/ -> non terminal
	com/google/ -> non terminal
	com/google/maps/ -> terminal


	Overwriting existing prefixes:
	==============================

	As the existing prefix has an entry in the log (ht_log), it needs to be 
	updated.  We never need to update the destination port (according to chosen
	semantics above).

	> If the new prefix is non-terminal, the is_terminal field of the log entry
	should be set to non-terminal.
	> If the new prefix is terminal, the is_terminal field of the log entry
	should remain unchanged.




10M FIB stats (Tsinghua's FIB)
============================

This is the 10-million entry FIB from the NDN papers by Prof. Bin Liu and 
students.

	974 URLs have 1 components
	7086509 URLs have 2 components
	1888029 URLs have 3 components
	259022 URLs have 4 components
	16980 URLs have 5 components
	1268 URLs have 6 components
	288 URLs have 7 components
	12 URLs have 8 components
	2 URLs have 9 components

20% of the URLs have 3 components.

The "Fast Name Lookup for Named Data Networking" (IWQoS 2014) paper claims that
15.4% of their URLs have 3 components. That is for Tsinghua's smaller FIB with
3 million entries.

